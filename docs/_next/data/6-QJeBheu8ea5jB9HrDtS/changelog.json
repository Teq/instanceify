{"pageProps":{"slug":"changelog","frontmatter":{"title":"Changelog"},"githubLink":"https://github.com/teq/serialazy/tree/main/website/content/changelog.page.md","markdown":"<h1 id=\"changelog\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#changelog\"><span class=\"icon icon-link\"></span></a>Changelog</h1>\n<h2 id=\"v300\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v300\"><span class=\"icon icon-link\"></span></a>v3.0.0</h2>\n<ul>\n<li><strong>[BREAKING]</strong> Removed <code>@Serialize.Type()</code> and <code>@Serialize.Custom()</code> decorators.\nNow all type and property decoration is done by <code>@Serialize()</code>.</li>\n<li><strong>[BREAKING]</strong> <code>@Serialize()</code> accepts custom type serializer (<code>up</code> &#x26; <code>down</code>) and options as a single argument.</li>\n<li><strong>[BREAKING]</strong> Removed <code>TypeSerializer.discriminate()</code> (redundant, was never used)</li>\n<li>Pass <code>inflate</code> / <code>deflate</code> options to <code>up</code> / <code>down</code> functions</li>\n<li>Add <code>Serializable</code>, an abstract base class for serializables</li>\n<li>Async serialization / deserialization (<code>deflate.resolve</code> and <code>inflate.resolve</code>)</li>\n<li>Serializatio / deserialization to/from a POJO (<code>as</code> and <code>toPojo</code> options)</li>\n<li>Support projections (<code>projection</code> and <code>fallbackToDefaultProjection</code> options)</li>\n<li>Add optional <code>as</code> parameter to DeflateOptions. It allows to override a type of serializable\n(serialize as a different type)</li>\n<li>Add <code>inflate</code> / <code>deflate</code> options</li>\n<li>Both <code>up</code> and <code>down</code> functions for custom type serializer are now optional</li>\n</ul>\n<h2 id=\"v202\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v202\"><span class=\"icon icon-link\"></span></a>v2.0.2</h2>\n<ul>\n<li>Refine class inheritance logic: Inheriting from property-bag serializable makes child class\na property-bag serializable. Inheriting from serializable with custom type serializer doesn't\nmake child class serializable. Fixes <a href=\"https://github.com/teq/serialazy/issues/11\">#11</a>.</li>\n</ul>\n<h2 id=\"v201\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v201\"><span class=\"icon icon-link\"></span></a>v2.0.1</h2>\n<ul>\n<li>Update <code>PropertyBagMetadata.getTypeSerializer()</code>: <code>up</code> &#x26; <code>down</code> arguments are checked for being null/undefined\nbefore applying property serializers. Fixes <a href=\"https://github.com/teq/serialazy/issues/6\">#6</a>.</li>\n</ul>\n<h2 id=\"v200\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v200\"><span class=\"icon icon-link\"></span></a>v2.0.0</h2>\n<ul>\n<li><strong>[BREAKING]</strong> Removed <code>isSerializable</code>, <code>deepMerge</code> functions and <code>@Serialize.Skip()</code> decorator.</li>\n<li>Add <code>@Serialize.Type()</code> decorator which allows to define custom serializers for types</li>\n<li><code>deflate</code> / <code>inflate</code> can accept primitives (string, number, boolean and their \"boxed\" variants, null, undefined)</li>\n</ul>\n<h2 id=\"v131\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v131\"><span class=\"icon icon-link\"></span></a>v1.3.1</h2>\n<ul>\n<li>Add <code>assertSerializable</code> functions which throws an error if target is not serializable class instance\nor serializable class constructor function.</li>\n<li>Previously to be <em>serializable</em> class should have serializers on its own properties (i.e. should have own metadata)\nwith no respect to its ancestors. Now class is <em>serializable</em> if it either has own serializers or any of its ancestors have serializers.</li>\n<li>Using global symbol to access serializable's metadata.\nThis fixes a bug when project dependencies introduce multiple instances of library\nand metadata defined in one version can't be accessed in another.</li>\n</ul>\n<h2 id=\"v130\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v130\"><span class=\"icon icon-link\"></span></a>v1.3.0</h2>\n<ul>\n<li>Add <code>deepMerge</code> function which performs a deep (recursive) property merge from serializable-like source object to serializable destination object</li>\n<li>Add <code>isSerializable</code> function which allows to check if target is a serializable class instance or serializable class constructor function</li>\n<li>Add class name to serialization / deserialization error message</li>\n</ul>\n<h2 id=\"v123\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v123\"><span class=\"icon icon-link\"></span></a>v1.2.3</h2>\n<ul>\n<li><code>Serialize.Custom</code> decorator now accepts either serializer or serializer provider function</li>\n</ul>\n<h2 id=\"v122\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v122\"><span class=\"icon icon-link\"></span></a>v1.2.2</h2>\n<ul>\n<li>Fix a bug with circular module dependencies</li>\n</ul>\n<h2 id=\"v121\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v121\"><span class=\"icon icon-link\"></span></a>v1.2.1</h2>\n<ul>\n<li>Export JSON types</li>\n</ul>\n<h2 id=\"v120\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v120\"><span class=\"icon icon-link\"></span></a>v1.2.0</h2>\n<ul>\n<li>Child class inherits serializers from parent</li>\n<li>Add support for <code>options</code> in custom serializers</li>\n<li>Add <code>name</code> option which allows to map property to a different name</li>\n</ul>\n<h2 id=\"v101\"><a aria-hidden=\"true\" tabindex=\"-1\" href=\"#v101\"><span class=\"icon icon-link\"></span></a>v1.0.1</h2>\n<p>Initial version features:</p>\n<ul>\n<li>Default serializers for primitive types (string, number, boolean)</li>\n<li>Support for optional / nullable properties</li>\n<li>Recursive object tree serialization (circular references not handled yet)</li>\n<li>Custom property serialization functions</li>\n</ul>"},"__N_SSG":true}